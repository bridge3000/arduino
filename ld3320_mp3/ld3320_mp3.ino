#include <ld3320.h>

int nMp3Size = 500;
int nMp3Pos = 0;
int bMp3Play = 0;

#define DEMO_SOUND_SIZE 1235
unsigned char xdata bpDemoSound [DEMO_SOUND_SIZE] = {	//	对应verygood_withHead.mp3 这个MP3文件有ID3的文件头
  0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x76, 0x50, 0x52, 0x49, 0x56, 0x00, 0x00,
  0x00, 0x0E, 0x00, 0x00, 0x50, 0x65, 0x61, 0x6B, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x00, 0xFF, 0x7F,
  0x00, 0x00, 0x50, 0x52, 0x49, 0x56, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x41, 0x76, 0x65, 0x72,
  0x61, 0x67, 0x65, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0xA1, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0xE2, 0x10, 0xC0, 0x0B, 0xC1, 0x00, 0x07, 0xF0, 0x4E, 0x80, 0xD0, 0x61, 0x86, 0x28, 0xF3,
  0xF6, 0x00, 0x6E, 0x04, 0x0E, 0x4C, 0xD7, 0xB4, 0x11, 0x1C, 0x82, 0x17, 0x76, 0xC9, 0x31, 0x13,
  0xE5, 0x1C, 0x18, 0x5C, 0x83, 0xC6, 0xBC, 0x85, 0xDB, 0x91, 0x3E, 0x30, 0x07, 0x3E, 0x53, 0x25,
  0x1C, 0x16, 0x0D, 0x3E, 0xFF, 0xE2, 0x10, 0xC0, 0x6C, 0x92, 0x05, 0x08, 0x28, 0x56, 0xC5, 0x71,
  0x4F, 0x00, 0x00, 0x0C, 0xE2, 0xCE, 0x23, 0x6A, 0x07, 0xEC, 0x0C, 0xF1, 0xDE, 0x6B, 0xC0, 0x64,
  0xCC, 0x7B, 0xC9, 0x10, 0x06, 0x3C, 0xFF, 0xFF, 0xFD, 0xB1, 0x50, 0x20, 0x20, 0x5C, 0xD7, 0x04,
  0x02, 0x76, 0x3A, 0x95, 0x88, 0xF7, 0x31, 0xBE, 0xFF, 0xE2, 0x12, 0xC0, 0x4A, 0xC1, 0x09, 0x05,
  0xB0, 0x36, 0xF4, 0x29, 0x89, 0x00, 0x00, 0x41, 0xD4, 0x87, 0xE8, 0xFB, 0xBF, 0xFF, 0xFF, 0xE8,
  0x08, 0x9F, 0xFF, 0xD6, 0x5F, 0x68, 0x0F, 0x76, 0xCD, 0x0C, 0x92, 0x7D, 0x0F, 0x6E, 0x54, 0x82,
  0xCA, 0x7F, 0xFF, 0xFF, 0xFF, 0x3A, 0xB1, 0xE0, 0xB2, 0x02, 0xC7, 0xED, 0x79, 0xFF, 0xE2, 0x10,
  0xC0, 0xB5, 0x38, 0x18, 0x07, 0x90, 0x47, 0x04, 0xB1, 0xC7, 0x00, 0x00, 0x91, 0x03, 0xCE, 0x0A,
  0x82, 0x04, 0x1F, 0x80, 0x04, 0x01, 0x47, 0xF8, 0x6B, 0xC2, 0x0F, 0xFF, 0x08, 0x0F, 0x6A, 0x89,
  0x8A, 0x7F, 0xFF, 0xFF, 0xFC, 0x11, 0x89, 0x0C, 0x8A, 0x09, 0x9C, 0xD0, 0xC4, 0x42, 0x6D, 0x0F,
  0x49, 0xFF, 0xE2, 0x10, 0xC0, 0xE7, 0xFC, 0x1E, 0x07, 0xA0, 0x76, 0xFD, 0x70, 0x39, 0x4A, 0x48,
  0x6D, 0x90, 0x86, 0x80, 0xFC, 0x7E, 0x0D, 0xBD, 0xF2, 0x5D, 0x4D, 0xD0, 0x26, 0x20, 0x58, 0x17,
  0xFF, 0xEB, 0x7C, 0x4C, 0x02, 0xEA, 0x48, 0x2A, 0xE9, 0x8D, 0x3F, 0x60, 0x1A, 0x82, 0xC0, 0x7E,
  0x22, 0x09, 0xEF, 0x90, 0xC7, 0xFF, 0xE2, 0x10, 0xC0, 0xA4, 0xC6, 0x24, 0x06, 0x58, 0x73, 0x09,
  0x90, 0x10, 0x4A, 0x48, 0xC9, 0x30, 0xCA, 0xC6, 0x06, 0xD1, 0xE1, 0xAF, 0xFE, 0xB1, 0xA8, 0x38,
  0x03, 0x08, 0x9D, 0x20, 0x84, 0x4A, 0x40, 0x2C, 0x7F, 0x06, 0x00, 0x37, 0x20, 0x70, 0x37, 0xB1,
  0x85, 0x80, 0x00, 0x41, 0x61, 0xA2, 0x0A, 0x71, 0x13, 0xFF, 0xE2, 0x12, 0xC0, 0xE9, 0x5B, 0x2F,
  0x06, 0x78, 0x6F, 0x01, 0x90, 0x28, 0x50, 0x48, 0x3B, 0x3A, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x4B,
  0xAB, 0x6F, 0xB3, 0xB1, 0x99, 0x50, 0x47, 0x0C, 0xA5, 0xF2, 0x26, 0x8A, 0x02, 0x3E, 0xA5, 0xE6,
  0x23, 0x3A, 0x16, 0xB0, 0x87, 0x29, 0x86, 0x5D, 0x07, 0xFC, 0x86, 0x8A, 0xD4, 0x04, 0xFF, 0xE2,
  0x10, 0xC0, 0x4E, 0x21, 0x3B, 0x09, 0xC9, 0x67, 0x05, 0x90, 0x11, 0x44, 0x91, 0x63, 0x53, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF2, 0xE5, 0x33, 0xA0, 0xA4, 0x31, 0x8C, 0x69, 0x41, 0xF4,
  0x08, 0x88, 0x00, 0x03, 0xC1, 0x2F, 0x16, 0x80, 0x69, 0x6E, 0xEC, 0xE9, 0x28, 0xB9, 0xB6, 0x51,
  0x14, 0x1C, 0xFF, 0xE2, 0x10, 0xC0, 0x19, 0x5C, 0x38, 0x09, 0x49, 0x92, 0xDC, 0xC8, 0x84, 0x04,
  0x90, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x0D, 0x3B, 0xE9, 0xFC, 0xB3, 0xEB, 0x01, 0xF8, 0x30,
  0x01, 0x3F, 0x78, 0xF4, 0x80, 0x14, 0x20, 0x3D, 0x57, 0x5A, 0x6A, 0x27, 0x44, 0xE9, 0x54, 0xE9,
  0x96, 0x8B, 0xA5, 0x43, 0x0A, 0xB0, 0xFF, 0xE2, 0x10, 0xC0, 0x90, 0xBC, 0x37, 0x07, 0x80, 0x5A,
  0xEB, 0x84, 0x0A, 0xCE, 0x28, 0x85, 0xFF, 0xFF, 0x00, 0xB1, 0x27, 0x19, 0x0D, 0x19, 0x84, 0x42,
  0x03, 0x22, 0x00, 0x00, 0x8C, 0x26, 0xFA, 0x2A, 0xF7, 0x03, 0x15, 0xD9, 0x0A, 0x46, 0xB2, 0xC6,
  0xF3, 0x41, 0xAF, 0x23, 0xFF, 0xFF, 0x51, 0x20, 0x3D, 0x67, 0xFF, 0xE2, 0x12, 0xC0, 0x97, 0x2D,
  0x3E, 0x08, 0x80, 0x86, 0xA1, 0xA1, 0x4F, 0x48, 0x00, 0xDF, 0xE6, 0x51, 0xA0, 0xC5, 0x29, 0x50,
  0x10, 0x32, 0x00, 0x10, 0x89, 0xBF, 0x9A, 0x3E, 0x24, 0x6F, 0xA0, 0x12, 0x81, 0x60, 0x05, 0xC0,
  0xAE, 0x7E, 0x25, 0x15, 0x07, 0xFF, 0xFF, 0xFF, 0xCF, 0xB3, 0xFE, 0x9B, 0x58, 0x80, 0x6D, 0xFF,
  0xE2, 0x10, 0xC0, 0xF3, 0x3E, 0x42, 0x08, 0x80, 0x6B, 0x0D, 0x19, 0x82, 0x10, 0x00, 0x22, 0x8C,
  0x0D, 0x04, 0x6F, 0xF1, 0x63, 0xC5, 0x7F, 0x8F, 0x0F, 0x80, 0xD0, 0xD0, 0x32, 0x1B, 0xFA, 0x26,
  0x48, 0xFF, 0xFF, 0xFC, 0xD0, 0x5C, 0xC7, 0xFF, 0xC9, 0x0A, 0x88, 0x10, 0x08, 0x02, 0x3F, 0xE8,
  0xA4, 0x60, 0x37, 0xFF, 0xE2, 0x10, 0xC0, 0xF0, 0xCC, 0x45, 0x08, 0x18, 0x5F, 0x16, 0x39, 0xCA,
  0x00, 0x00, 0xFF, 0xF8, 0x30, 0x30, 0xE4, 0x5D, 0xA3, 0x5A, 0x32, 0xD3, 0x80, 0xA6, 0xBF, 0xFE,
  0x9A, 0x1B, 0xFF, 0xFF, 0xFF, 0xAB, 0xB1, 0xC8, 0x1C, 0x2E, 0x80, 0x92, 0x1B, 0x80, 0x81, 0xF8,
  0x00, 0xC2, 0x22, 0x20, 0x19, 0x1A, 0xA0, 0xFF, 0xE2, 0x10, 0xC0, 0xE9, 0x3E, 0x49, 0x07, 0x38,
  0x8F, 0x05, 0x70, 0x09, 0xDA, 0x4C, 0xCA, 0xCE, 0xE2, 0xB9, 0x27, 0x17, 0x08, 0xC1, 0xC1, 0xD1,
  0x56, 0xCD, 0x5C, 0x0C, 0x1D, 0xFF, 0xFF, 0xD3, 0x34, 0x40, 0x80, 0x01, 0x90, 0x24, 0x79, 0x8B,
  0x6D, 0x85, 0x5A, 0x22, 0x98, 0x9B, 0x46, 0x52, 0xCA, 0x24, 0x05, 0xFF, 0xE2, 0x12, 0xC0, 0x6A,
  0x2C, 0x51, 0x07, 0xA9, 0x47, 0x05, 0x48, 0x29, 0x84, 0x90, 0x6D, 0x4D, 0xC9, 0x77, 0xFF, 0xFF,
  0xAD, 0xC7, 0x4C, 0xA6, 0x60, 0x11, 0x86, 0xC2, 0x89, 0x68, 0x51, 0x2C, 0xA2, 0x78, 0x9F, 0x19,
  0x98, 0x08, 0x08, 0x0A, 0x44, 0x93, 0x3F, 0xFF, 0xFF, 0xF0, 0x57, 0xFF, 0xFC, 0xEA, 0xC6, 0x03,
  0xFF, 0xE2, 0x10, 0xC0, 0x5A, 0xE9, 0x58, 0x08, 0x30, 0x93, 0x16, 0x30, 0x08, 0x58, 0x4C, 0x21,
  0xA4, 0x01, 0x6B, 0xC0, 0x0A, 0x8F, 0x80, 0x48, 0x86, 0x14, 0x95, 0x89, 0xC8, 0x62, 0x28, 0x3A,
  0x11, 0x26, 0x55, 0x27, 0x90, 0xB8, 0x89, 0xCB, 0x35, 0x68, 0x72, 0x54, 0x88, 0x44, 0x6C, 0x11,
  0x51, 0xAD, 0x00, 0x00, 0xFF, 0xE2, 0x10, 0xC0, 0xDC, 0x6D, 0x5C, 0x06, 0xB0, 0x8B, 0x05, 0x90,
  0x08, 0x50, 0x4C, 0x54, 0x41, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x0C,
};




void setup() {
  LD_Init_MP3();
  LD_play();

}

void loop() {
  // put your main code here, to run repeatedly:

}

void LD_reset()
{
  //  RSTB = 1;
  //  delay(1);
  //  RSTB = 0;
  //  delay(1);
  //  RSTB = 1;
  //  delay(1);
  //  CSB = 0;
  //  delay(1);
  //  CSB = 1;
  //  delay(1);

  digitalWrite(RSTB, HIGH);
  delay(1);
  digitalWrite(RSTB, LOW);
  delay(1);
  digitalWrite(RSTB, HIGH);
  delay(1);
  digitalWrite(CS, LOW);
  delay(1);
  digitalWrite(CS, HIGH);
  delay(1);
  //  writeReg(0xb9, 0x00); 添加识别句的字符串长度
}

void LD_Init_MP3()
{
  nLD_Mode = LD_MODE_MP3;
  LD_Init_Common();
  writeReg(0xBD, 0x02);
  writeReg(0x17, 0x48);
  delay(10);
  
  writeReg(0x85, 0x52);
  writeReg(0x8F, 0x00);
  writeReg(0x81, 0x00);
  writeReg(0x83, 0x00);
  writeReg(0x8E, 0xff);
  writeReg(0x8D, 0xff);
  delay(1);
  writeReg(0x87, 0xff);
  writeReg(0x89, 0xff);
  delay(1);
  writeReg(0x22, 0x00);
  writeReg(0x23, 0x00);
  writeReg(0x20, 0xef);
  writeReg(0x21, 0x07);
  writeReg(0x24, 0x77);
  writeReg(0x25, 0x03);
  writeReg(0x26, 0xbb);
  writeReg(0x27, 0x01);
}

//调整音量
void LD_AdjustMIX2SPVolume(uint8 val)
{
  ucSPVol = val;
  val = ((15 - val) & 0x0f) << 2;
  LD_WriteReg(0x8E, val | 0xc3);
  LD_WriteReg(0x87, 0x78);
}

//开始播放
void LD_play()
{
  nMp3Pos = 0; //mp3文件的当前播放位
  bMp3Play = 1; //播放状态
  if (nMp3Pos >= nMp3Size)
    return ;

  LD_ReloadMp3Data();
  writeReg(0xBA, 0x00);
  writeReg(0x17, 0x48);
  writeReg(0x33, 0x01);
  writeReg(0x29, 0x04);
  writeReg(0x02, 0x01);
  writeReg(0x85, 0x5A);
  EX0 = 1;
}

void LD_ReloadMp3Data()
{
  uint32 nCurMp3Pos;
  uint8 val;
  uint8 k;

  if (nDemoFlag)
  {
    ucStatus = LD_ReadReg(0x06);
    while ( !(ucStatus & MASK_FIFO_STATUS_AFULL) && (nMp3Pos < nMp3Size) )
    {
      val = bpDemoSound[nMp3Pos++];
      LD_WriteReg(0x01, val);
      if (nMp3Pos == DEMO_SOUND_SIZE)
        nMp3Pos = 0;

      ucStatus = LD_ReadReg(0x06);
    }

  }

}

void LD_Init_Common()
{
  bMp3Play = 0;
  LD_ReadReg(0x06);
  LD_WriteReg(0x17, 0x35);
  delay(10);
  LD_ReadReg(0x06);
  LD_WriteReg(0x89, 0x03);
  delay(5);
  LD_WriteReg(0xCF, 0x43);
  delay(5);
  LD_WriteReg(0xCB, 0x02); /*PLL setting*/
  LD_WriteReg(0x11, LD_PLL_11);
  if (nLD_Mode == LD_MODE_MP3)
  {
    LD_WriteReg(0x1E, 0x00);
    //!!注意，下面三个寄存器，会随晶振频率变化而设置不同
    //!!注意,请根据使用的晶振频率修改参考程序中的CLK_IN
    LD_WriteReg(0x19, LD_PLL_MP3_19);
    LD_WriteReg(0x1B, LD_PLL_MP3_1B);
    LD_WriteReg(0x1D, LD_PLL_MP3_1D);
  }
  else
  {
    LD_WriteReg(0x1E, 0x00);
    //!!注意，下面三个寄存器，会随晶振频率变化而设置不同
    //!!注意,请根据使用的晶振频率修改参考程序中的CLK_IN
    LD_WriteReg(0x19, LD_PLL_ASR_19);
    LD_WriteReg(0x1B, LD_PLL_ASR_1B);
    LD_WriteReg(0x1D, LD_PLL_ASR_1D);
  }
  LD_WriteReg(0xCD, 0x04);
  LD_WriteReg(0x17, 0x4c);
  delay(5);
  LD_WriteReg(0xB9, 0x00);
  LD_WriteReg(0xCF, 0x4f);
  LD_WriteReg(0x6F, 0xFF);
}

void ProcessInt0()
{
  uint8 nAsrResCount = 0;
  EX0 = 0;
  ET0 = 0;
  ucRegVal = LD_ReadReg(0x2B);
  ucHighInt = LD_ReadReg(0x29);
  ucLowInt = LD_ReadReg(0x02);
  LD_WriteReg(0x29, 0) ;
  LD_WriteReg(0x02, 0) ;
  if (nLD_Mode == LD_MODE_MP3)
  {
    if (LD_ReadReg(0xBA)&CAUSE_MP3_SONG_END)
    {
      LD_WriteReg(0x2B, 0);
      LD_WriteReg(0xBA, 0x00);
      LD_WriteReg(0xBC, 0x00);
      bMp3Play = 0;
      LD_WriteReg(0x08, 0x01);
      LD_WriteReg(0x08, 0x00);
      LD_WriteReg(0x33, 0x00);
      return ;
    }
    if (nMp3Pos >= nMp3Size)
    {
      LD_WriteReg(0xBC, 0x01);
      LD_WriteReg(0x29, 0x10);
      EX0 = 1;
      return;
    }
    LD_ReloadMp3Data();
    LD_WriteReg(0x29, ucHighInt);
    LD_WriteReg(0x02, ucLowInt) ;
    EX0 = 1;
  }
}

attachInterrupt(0, ProcessInt0, LOW); //中断
